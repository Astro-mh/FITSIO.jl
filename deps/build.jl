using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libcfitsio"], :libcfitsio),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/mweastwood/CFITSIOBuilder/releases/download/v3.440"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc, :blank_abi) => ("$bin_prefix/CFITSIO.aarch64-linux-gnu.tar.gz", "acb85f6b4d196821db44b628dbbed492168f1ecdf630e976e40f896db9647ac9"),
    BinaryProvider.Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/CFITSIO.arm-linux-gnueabihf.tar.gz", "c5e7e682ea677a93466e530128095fb259d106e50133e58cb73430a97c5c9556"),
    BinaryProvider.Linux(:i686, :glibc, :blank_abi) => ("$bin_prefix/CFITSIO.i686-linux-gnu.tar.gz", "a9ce8b7532fcba36a66706078aa9501c81b24b00fa7863ec0768dea4174593c3"),
    BinaryProvider.Windows(:i686, :blank_libc, :blank_abi) => ("$bin_prefix/CFITSIO.i686-w64-mingw32.tar.gz", "d654406e1085ff87a37af5b95db5a28bfff7d83cacc74cce05471c9364dffb86"),
    BinaryProvider.Linux(:powerpc64le, :glibc, :blank_abi) => ("$bin_prefix/CFITSIO.powerpc64le-linux-gnu.tar.gz", "29e126d6c97b515b8af2907a9461da3f12c27cfdb8584517ead227403754d7cb"),
    BinaryProvider.MacOS(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/CFITSIO.x86_64-apple-darwin14.tar.gz", "3337b4f0ca84ffc5f44a1eae5189947920365ede8a1e289608a6548b767d87f4"),
    BinaryProvider.Linux(:x86_64, :glibc, :blank_abi) => ("$bin_prefix/CFITSIO.x86_64-linux-gnu.tar.gz", "8205e20d0b7aa541a36e88c99794a0a58ad3a9e562ff94ee384efd0a9be46fd7"),
    BinaryProvider.Windows(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/CFITSIO.x86_64-w64-mingw32.tar.gz", "c7b3d047630d099666ae5c539950464affc5dc537dcd6dd1a9d61787b815a0fc"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something more even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
