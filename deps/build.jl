using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libcfitsio"], :libcfitsio),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/mweastwood/CFITSIOBuilder/releases/download/v3.440"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc, :blank_abi) => ("$bin_prefix/CFITSIO.aarch64-linux-gnu.tar.gz", "b2b282ae027b78890b16b62472662f40b0b4f78951ac3ea9a43145ff0c1feab9"),
    BinaryProvider.Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/CFITSIO.arm-linux-gnueabihf.tar.gz", "f19ab26df930a8302c50dbcdf89e161aad1e1670cc4c26135df9a04791676241"),
    BinaryProvider.Linux(:i686, :glibc, :blank_abi) => ("$bin_prefix/CFITSIO.i686-linux-gnu.tar.gz", "c4253fe06b7bcc47abe263171e48898c32053fe9f4858d9f3db3885a70f87992"),
    BinaryProvider.Windows(:i686, :blank_libc, :blank_abi) => ("$bin_prefix/CFITSIO.i686-w64-mingw32.tar.gz", "1712466d1116ddbbd96b4abdd698833e518d132dd1f4a6386e5629fa16a5a106"),
    BinaryProvider.Linux(:powerpc64le, :glibc, :blank_abi) => ("$bin_prefix/CFITSIO.powerpc64le-linux-gnu.tar.gz", "a7491bca1e7bce1aa6b38e4cc2f679b07f996c1fd6196190e7b19be94c7747f0"),
    BinaryProvider.MacOS(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/CFITSIO.x86_64-apple-darwin14.tar.gz", "5ae80c3f55c93d8c60c774f1e4b9d98924bc7b7e3db242908c17d57dee34d6b2"),
    BinaryProvider.Linux(:x86_64, :glibc, :blank_abi) => ("$bin_prefix/CFITSIO.x86_64-linux-gnu.tar.gz", "8df69aaa5b1050f50c4313e541402e3ea163868cb89561e60be92047df17b211"),
    BinaryProvider.Windows(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/CFITSIO.x86_64-w64-mingw32.tar.gz", "5c90a538a0fdab1f4de5220b28049ada32bc9dc037bfdafcd36bfa3e4f36acae"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something more even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
